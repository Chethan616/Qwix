rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Threads collection
    match /threads/{threadId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        (resource.data.communityId != null && 
         get(/databases/$(database)/documents/communities/$(resource.data.communityId)).data.moderators.hasAny([request.auth.uid]))
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        (resource.data.communityId != null && 
         get(/databases/$(database)/documents/communities/$(resource.data.communityId)).data.moderators.hasAny([request.auth.uid]))
      );
    }

    // Communities collection
    match /communities/{communityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Allow users to join/leave communities
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['threadCount']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'threadCount'])) ||
        // Allow updates by owner or moderators
        (resource.data.ownerId == request.auth.uid || 
         resource.data.moderators.hasAny([request.auth.uid]))
      );
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
} 